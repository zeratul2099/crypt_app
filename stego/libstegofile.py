# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _libstegofile
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class lsb_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsb_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsb_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstegofile.lsb_data_t_data_set
    __swig_getmethods__["data"] = _libstegofile.lsb_data_t_data_get
    if _newclass:data = _swig_property(_libstegofile.lsb_data_t_data_get, _libstegofile.lsb_data_t_data_set)
    __swig_setmethods__["size"] = _libstegofile.lsb_data_t_size_set
    __swig_getmethods__["size"] = _libstegofile.lsb_data_t_size_get
    if _newclass:size = _swig_property(_libstegofile.lsb_data_t_size_get, _libstegofile.lsb_data_t_size_set)
    def __init__(self, *args): 
        this = _libstegofile.new_lsb_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_lsb_data_t
    __del__ = lambda self : None;
lsb_data_t_swigregister = _libstegofile.lsb_data_t_swigregister
lsb_data_t_swigregister(lsb_data_t)

class rgb_pixel_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rgb_pixel_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rgb_pixel_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rgb"] = _libstegofile.rgb_pixel_t_rgb_set
    __swig_getmethods__["rgb"] = _libstegofile.rgb_pixel_t_rgb_get
    if _newclass:rgb = _swig_property(_libstegofile.rgb_pixel_t_rgb_get, _libstegofile.rgb_pixel_t_rgb_set)
    __swig_getmethods__["comp"] = _libstegofile.rgb_pixel_t_comp_get
    if _newclass:comp = _swig_property(_libstegofile.rgb_pixel_t_comp_get)
    def __init__(self, *args): 
        this = _libstegofile.new_rgb_pixel_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_rgb_pixel_t
    __del__ = lambda self : None;
rgb_pixel_t_swigregister = _libstegofile.rgb_pixel_t_swigregister
rgb_pixel_t_swigregister(rgb_pixel_t)

class rgb_pixel_t_comp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rgb_pixel_t_comp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rgb_pixel_t_comp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _libstegofile.rgb_pixel_t_comp_r_set
    __swig_getmethods__["r"] = _libstegofile.rgb_pixel_t_comp_r_get
    if _newclass:r = _swig_property(_libstegofile.rgb_pixel_t_comp_r_get, _libstegofile.rgb_pixel_t_comp_r_set)
    __swig_setmethods__["g"] = _libstegofile.rgb_pixel_t_comp_g_set
    __swig_getmethods__["g"] = _libstegofile.rgb_pixel_t_comp_g_get
    if _newclass:g = _swig_property(_libstegofile.rgb_pixel_t_comp_g_get, _libstegofile.rgb_pixel_t_comp_g_set)
    __swig_setmethods__["b"] = _libstegofile.rgb_pixel_t_comp_b_set
    __swig_getmethods__["b"] = _libstegofile.rgb_pixel_t_comp_b_get
    if _newclass:b = _swig_property(_libstegofile.rgb_pixel_t_comp_b_get, _libstegofile.rgb_pixel_t_comp_b_set)
    def __init__(self, *args): 
        this = _libstegofile.new_rgb_pixel_t_comp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_rgb_pixel_t_comp
    __del__ = lambda self : None;
rgb_pixel_t_comp_swigregister = _libstegofile.rgb_pixel_t_comp_swigregister
rgb_pixel_t_comp_swigregister(rgb_pixel_t_comp)

class rgb_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rgb_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rgb_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstegofile.rgb_data_t_data_set
    __swig_getmethods__["data"] = _libstegofile.rgb_data_t_data_get
    if _newclass:data = _swig_property(_libstegofile.rgb_data_t_data_get, _libstegofile.rgb_data_t_data_set)
    __swig_setmethods__["size_x"] = _libstegofile.rgb_data_t_size_x_set
    __swig_getmethods__["size_x"] = _libstegofile.rgb_data_t_size_x_get
    if _newclass:size_x = _swig_property(_libstegofile.rgb_data_t_size_x_get, _libstegofile.rgb_data_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstegofile.rgb_data_t_size_y_set
    __swig_getmethods__["size_y"] = _libstegofile.rgb_data_t_size_y_get
    if _newclass:size_y = _swig_property(_libstegofile.rgb_data_t_size_y_get, _libstegofile.rgb_data_t_size_y_set)
    def __init__(self, *args): 
        this = _libstegofile.new_rgb_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_rgb_data_t
    __del__ = lambda self : None;
rgb_data_t_swigregister = _libstegofile.rgb_data_t_swigregister
rgb_data_t_swigregister(rgb_data_t)

class wav_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wav_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wav_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstegofile.wav_data_t_data_set
    __swig_getmethods__["data"] = _libstegofile.wav_data_t_data_get
    if _newclass:data = _swig_property(_libstegofile.wav_data_t_data_get, _libstegofile.wav_data_t_data_set)
    __swig_setmethods__["num_channels"] = _libstegofile.wav_data_t_num_channels_set
    __swig_getmethods__["num_channels"] = _libstegofile.wav_data_t_num_channels_get
    if _newclass:num_channels = _swig_property(_libstegofile.wav_data_t_num_channels_get, _libstegofile.wav_data_t_num_channels_set)
    __swig_setmethods__["size"] = _libstegofile.wav_data_t_size_set
    __swig_getmethods__["size"] = _libstegofile.wav_data_t_size_get
    if _newclass:size = _swig_property(_libstegofile.wav_data_t_size_get, _libstegofile.wav_data_t_size_set)
    def __init__(self, *args): 
        this = _libstegofile.new_wav_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_wav_data_t
    __del__ = lambda self : None;
wav_data_t_swigregister = _libstegofile.wav_data_t_swigregister
wav_data_t_swigregister(wav_data_t)

class palette_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, palette_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, palette_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table"] = _libstegofile.palette_data_t_table_set
    __swig_getmethods__["table"] = _libstegofile.palette_data_t_table_get
    if _newclass:table = _swig_property(_libstegofile.palette_data_t_table_get, _libstegofile.palette_data_t_table_set)
    __swig_setmethods__["tbl_size"] = _libstegofile.palette_data_t_tbl_size_set
    __swig_getmethods__["tbl_size"] = _libstegofile.palette_data_t_tbl_size_get
    if _newclass:tbl_size = _swig_property(_libstegofile.palette_data_t_tbl_size_get, _libstegofile.palette_data_t_tbl_size_set)
    __swig_setmethods__["unique_colors"] = _libstegofile.palette_data_t_unique_colors_set
    __swig_getmethods__["unique_colors"] = _libstegofile.palette_data_t_unique_colors_get
    if _newclass:unique_colors = _swig_property(_libstegofile.palette_data_t_unique_colors_get, _libstegofile.palette_data_t_unique_colors_set)
    __swig_setmethods__["unique_length"] = _libstegofile.palette_data_t_unique_length_set
    __swig_getmethods__["unique_length"] = _libstegofile.palette_data_t_unique_length_get
    if _newclass:unique_length = _swig_property(_libstegofile.palette_data_t_unique_length_get, _libstegofile.palette_data_t_unique_length_set)
    __swig_setmethods__["nonunique_colors"] = _libstegofile.palette_data_t_nonunique_colors_set
    __swig_getmethods__["nonunique_colors"] = _libstegofile.palette_data_t_nonunique_colors_get
    if _newclass:nonunique_colors = _swig_property(_libstegofile.palette_data_t_nonunique_colors_get, _libstegofile.palette_data_t_nonunique_colors_set)
    __swig_setmethods__["nonunique_length"] = _libstegofile.palette_data_t_nonunique_length_set
    __swig_getmethods__["nonunique_length"] = _libstegofile.palette_data_t_nonunique_length_get
    if _newclass:nonunique_length = _swig_property(_libstegofile.palette_data_t_nonunique_length_get, _libstegofile.palette_data_t_nonunique_length_set)
    __swig_setmethods__["img_data"] = _libstegofile.palette_data_t_img_data_set
    __swig_getmethods__["img_data"] = _libstegofile.palette_data_t_img_data_get
    if _newclass:img_data = _swig_property(_libstegofile.palette_data_t_img_data_get, _libstegofile.palette_data_t_img_data_set)
    __swig_setmethods__["size_x"] = _libstegofile.palette_data_t_size_x_set
    __swig_getmethods__["size_x"] = _libstegofile.palette_data_t_size_x_get
    if _newclass:size_x = _swig_property(_libstegofile.palette_data_t_size_x_get, _libstegofile.palette_data_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstegofile.palette_data_t_size_y_set
    __swig_getmethods__["size_y"] = _libstegofile.palette_data_t_size_y_get
    if _newclass:size_y = _swig_property(_libstegofile.palette_data_t_size_y_get, _libstegofile.palette_data_t_size_y_set)
    def __init__(self, *args): 
        this = _libstegofile.new_palette_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_palette_data_t
    __del__ = lambda self : None;
palette_data_t_swigregister = _libstegofile.palette_data_t_swigregister
palette_data_t_swigregister(palette_data_t)

class jpeg_quant_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_quant_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_quant_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["values"] = _libstegofile.jpeg_quant_t_values_set
    __swig_getmethods__["values"] = _libstegofile.jpeg_quant_t_values_get
    if _newclass:values = _swig_property(_libstegofile.jpeg_quant_t_values_get, _libstegofile.jpeg_quant_t_values_set)
    def __init__(self, *args): 
        this = _libstegofile.new_jpeg_quant_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_jpeg_quant_t
    __del__ = lambda self : None;
jpeg_quant_t_swigregister = _libstegofile.jpeg_quant_t_swigregister
jpeg_quant_t_swigregister(jpeg_quant_t)

class jpeg_block_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_block_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_block_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["values"] = _libstegofile.jpeg_block_t_values_set
    __swig_getmethods__["values"] = _libstegofile.jpeg_block_t_values_get
    if _newclass:values = _swig_property(_libstegofile.jpeg_block_t_values_get, _libstegofile.jpeg_block_t_values_set)
    def __init__(self, *args): 
        this = _libstegofile.new_jpeg_block_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_jpeg_block_t
    __del__ = lambda self : None;
jpeg_block_t_swigregister = _libstegofile.jpeg_block_t_swigregister
jpeg_block_t_swigregister(jpeg_block_t)

class jpeg_comp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_comp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_comp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quant"] = _libstegofile.jpeg_comp_t_quant_set
    __swig_getmethods__["quant"] = _libstegofile.jpeg_comp_t_quant_get
    if _newclass:quant = _swig_property(_libstegofile.jpeg_comp_t_quant_get, _libstegofile.jpeg_comp_t_quant_set)
    __swig_setmethods__["blocks"] = _libstegofile.jpeg_comp_t_blocks_set
    __swig_getmethods__["blocks"] = _libstegofile.jpeg_comp_t_blocks_get
    if _newclass:blocks = _swig_property(_libstegofile.jpeg_comp_t_blocks_get, _libstegofile.jpeg_comp_t_blocks_set)
    __swig_setmethods__["nblocks"] = _libstegofile.jpeg_comp_t_nblocks_set
    __swig_getmethods__["nblocks"] = _libstegofile.jpeg_comp_t_nblocks_get
    if _newclass:nblocks = _swig_property(_libstegofile.jpeg_comp_t_nblocks_get, _libstegofile.jpeg_comp_t_nblocks_set)
    def __init__(self, *args): 
        this = _libstegofile.new_jpeg_comp_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_jpeg_comp_t
    __del__ = lambda self : None;
jpeg_comp_t_swigregister = _libstegofile.jpeg_comp_t_swigregister
jpeg_comp_t_swigregister(jpeg_comp_t)

class jpeg_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["comp_num"] = _libstegofile.jpeg_data_t_comp_num_set
    __swig_getmethods__["comp_num"] = _libstegofile.jpeg_data_t_comp_num_get
    if _newclass:comp_num = _swig_property(_libstegofile.jpeg_data_t_comp_num_get, _libstegofile.jpeg_data_t_comp_num_set)
    __swig_setmethods__["comp"] = _libstegofile.jpeg_data_t_comp_set
    __swig_getmethods__["comp"] = _libstegofile.jpeg_data_t_comp_get
    if _newclass:comp = _swig_property(_libstegofile.jpeg_data_t_comp_get, _libstegofile.jpeg_data_t_comp_set)
    __swig_setmethods__["size_x"] = _libstegofile.jpeg_data_t_size_x_set
    __swig_getmethods__["size_x"] = _libstegofile.jpeg_data_t_size_x_get
    if _newclass:size_x = _swig_property(_libstegofile.jpeg_data_t_size_x_get, _libstegofile.jpeg_data_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstegofile.jpeg_data_t_size_y_set
    __swig_getmethods__["size_y"] = _libstegofile.jpeg_data_t_size_y_get
    if _newclass:size_y = _swig_property(_libstegofile.jpeg_data_t_size_y_get, _libstegofile.jpeg_data_t_size_y_set)
    def __init__(self, *args): 
        this = _libstegofile.new_jpeg_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_jpeg_data_t
    __del__ = lambda self : None;
jpeg_data_t_swigregister = _libstegofile.jpeg_data_t_swigregister
jpeg_data_t_swigregister(jpeg_data_t)

class cpt_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpt_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpt_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstegofile.cpt_data_t_data_set
    __swig_getmethods__["data"] = _libstegofile.cpt_data_t_data_get
    if _newclass:data = _swig_property(_libstegofile.cpt_data_t_data_get, _libstegofile.cpt_data_t_data_set)
    __swig_setmethods__["size_x"] = _libstegofile.cpt_data_t_size_x_set
    __swig_getmethods__["size_x"] = _libstegofile.cpt_data_t_size_x_get
    if _newclass:size_x = _swig_property(_libstegofile.cpt_data_t_size_x_get, _libstegofile.cpt_data_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstegofile.cpt_data_t_size_y_set
    __swig_getmethods__["size_y"] = _libstegofile.cpt_data_t_size_y_get
    if _newclass:size_y = _swig_property(_libstegofile.cpt_data_t_size_y_get, _libstegofile.cpt_data_t_size_y_set)
    def __init__(self, *args): 
        this = _libstegofile.new_cpt_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_cpt_data_t
    __del__ = lambda self : None;
cpt_data_t_swigregister = _libstegofile.cpt_data_t_swigregister
cpt_data_t_swigregister(cpt_data_t)

class svg_attrib_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svg_attrib_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svg_attrib_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstegofile.svg_attrib_t_data_set
    __swig_getmethods__["data"] = _libstegofile.svg_attrib_t_data_get
    if _newclass:data = _swig_property(_libstegofile.svg_attrib_t_data_get, _libstegofile.svg_attrib_t_data_set)
    __swig_setmethods__["node"] = _libstegofile.svg_attrib_t_node_set
    __swig_getmethods__["node"] = _libstegofile.svg_attrib_t_node_get
    if _newclass:node = _swig_property(_libstegofile.svg_attrib_t_node_get, _libstegofile.svg_attrib_t_node_set)
    def __init__(self, *args): 
        this = _libstegofile.new_svg_attrib_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_svg_attrib_t
    __del__ = lambda self : None;
svg_attrib_t_swigregister = _libstegofile.svg_attrib_t_swigregister
svg_attrib_t_swigregister(svg_attrib_t)

class svg_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svg_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svg_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attributes"] = _libstegofile.svg_data_t_attributes_set
    __swig_getmethods__["attributes"] = _libstegofile.svg_data_t_attributes_get
    if _newclass:attributes = _swig_property(_libstegofile.svg_data_t_attributes_get, _libstegofile.svg_data_t_attributes_set)
    __swig_setmethods__["num_attribs"] = _libstegofile.svg_data_t_num_attribs_set
    __swig_getmethods__["num_attribs"] = _libstegofile.svg_data_t_num_attribs_get
    if _newclass:num_attribs = _swig_property(_libstegofile.svg_data_t_num_attribs_get, _libstegofile.svg_data_t_num_attribs_set)
    def __init__(self, *args): 
        this = _libstegofile.new_svg_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_svg_data_t
    __del__ = lambda self : None;
svg_data_t_swigregister = _libstegofile.svg_data_t_swigregister
svg_data_t_swigregister(svg_data_t)

class battlesteg_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, battlesteg_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, battlesteg_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["startbit"] = _libstegofile.battlesteg_parameter_startbit_set
    __swig_getmethods__["startbit"] = _libstegofile.battlesteg_parameter_startbit_get
    if _newclass:startbit = _swig_property(_libstegofile.battlesteg_parameter_startbit_get, _libstegofile.battlesteg_parameter_startbit_set)
    __swig_setmethods__["filter"] = _libstegofile.battlesteg_parameter_filter_set
    __swig_getmethods__["filter"] = _libstegofile.battlesteg_parameter_filter_get
    if _newclass:filter = _swig_property(_libstegofile.battlesteg_parameter_filter_get, _libstegofile.battlesteg_parameter_filter_set)
    __swig_setmethods__["move_away"] = _libstegofile.battlesteg_parameter_move_away_set
    __swig_getmethods__["move_away"] = _libstegofile.battlesteg_parameter_move_away_get
    if _newclass:move_away = _swig_property(_libstegofile.battlesteg_parameter_move_away_get, _libstegofile.battlesteg_parameter_move_away_set)
    __swig_setmethods__["range"] = _libstegofile.battlesteg_parameter_range_set
    __swig_getmethods__["range"] = _libstegofile.battlesteg_parameter_range_get
    if _newclass:range = _swig_property(_libstegofile.battlesteg_parameter_range_get, _libstegofile.battlesteg_parameter_range_set)
    __swig_setmethods__["last_hit_x"] = _libstegofile.battlesteg_parameter_last_hit_x_set
    __swig_getmethods__["last_hit_x"] = _libstegofile.battlesteg_parameter_last_hit_x_get
    if _newclass:last_hit_x = _swig_property(_libstegofile.battlesteg_parameter_last_hit_x_get, _libstegofile.battlesteg_parameter_last_hit_x_set)
    __swig_setmethods__["last_hit_y"] = _libstegofile.battlesteg_parameter_last_hit_y_set
    __swig_getmethods__["last_hit_y"] = _libstegofile.battlesteg_parameter_last_hit_y_get
    if _newclass:last_hit_y = _swig_property(_libstegofile.battlesteg_parameter_last_hit_y_get, _libstegofile.battlesteg_parameter_last_hit_y_set)
    __swig_setmethods__["password"] = _libstegofile.battlesteg_parameter_password_set
    __swig_getmethods__["password"] = _libstegofile.battlesteg_parameter_password_get
    if _newclass:password = _swig_property(_libstegofile.battlesteg_parameter_password_get, _libstegofile.battlesteg_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.battlesteg_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.battlesteg_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.battlesteg_parameter_pwlen_get, _libstegofile.battlesteg_parameter_pwlen_set)
    def __init__(self, *args): 
        this = _libstegofile.new_battlesteg_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_battlesteg_parameter
    __del__ = lambda self : None;
battlesteg_parameter_swigregister = _libstegofile.battlesteg_parameter_swigregister
battlesteg_parameter_swigregister(battlesteg_parameter)

class cpt_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpt_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpt_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstegofile.cpt_parameter_password_set
    __swig_getmethods__["password"] = _libstegofile.cpt_parameter_password_get
    if _newclass:password = _swig_property(_libstegofile.cpt_parameter_password_get, _libstegofile.cpt_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.cpt_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.cpt_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.cpt_parameter_pwlen_get, _libstegofile.cpt_parameter_pwlen_set)
    __swig_setmethods__["block_width"] = _libstegofile.cpt_parameter_block_width_set
    __swig_getmethods__["block_width"] = _libstegofile.cpt_parameter_block_width_get
    if _newclass:block_width = _swig_property(_libstegofile.cpt_parameter_block_width_get, _libstegofile.cpt_parameter_block_width_set)
    __swig_setmethods__["block_height"] = _libstegofile.cpt_parameter_block_height_set
    __swig_getmethods__["block_height"] = _libstegofile.cpt_parameter_block_height_get
    if _newclass:block_height = _swig_property(_libstegofile.cpt_parameter_block_height_get, _libstegofile.cpt_parameter_block_height_set)
    def __init__(self, *args): 
        this = _libstegofile.new_cpt_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_cpt_parameter
    __del__ = lambda self : None;
cpt_parameter_swigregister = _libstegofile.cpt_parameter_swigregister
cpt_parameter_swigregister(cpt_parameter)

class eh_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eh_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eh_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["amplitude"] = _libstegofile.eh_parameter_amplitude_set
    __swig_getmethods__["amplitude"] = _libstegofile.eh_parameter_amplitude_get
    if _newclass:amplitude = _swig_property(_libstegofile.eh_parameter_amplitude_get, _libstegofile.eh_parameter_amplitude_set)
    __swig_setmethods__["zero_offset"] = _libstegofile.eh_parameter_zero_offset_set
    __swig_getmethods__["zero_offset"] = _libstegofile.eh_parameter_zero_offset_get
    if _newclass:zero_offset = _swig_property(_libstegofile.eh_parameter_zero_offset_get, _libstegofile.eh_parameter_zero_offset_set)
    __swig_setmethods__["one_offset"] = _libstegofile.eh_parameter_one_offset_set
    __swig_getmethods__["one_offset"] = _libstegofile.eh_parameter_one_offset_get
    if _newclass:one_offset = _swig_property(_libstegofile.eh_parameter_one_offset_get, _libstegofile.eh_parameter_one_offset_set)
    __swig_setmethods__["block_size"] = _libstegofile.eh_parameter_block_size_set
    __swig_getmethods__["block_size"] = _libstegofile.eh_parameter_block_size_get
    if _newclass:block_size = _swig_property(_libstegofile.eh_parameter_block_size_get, _libstegofile.eh_parameter_block_size_set)
    def __init__(self, *args): 
        this = _libstegofile.new_eh_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_eh_parameter
    __del__ = lambda self : None;
eh_parameter_swigregister = _libstegofile.eh_parameter_swigregister
eh_parameter_swigregister(eh_parameter)

class f5_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, f5_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, f5_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstegofile.f5_parameter_password_set
    __swig_getmethods__["password"] = _libstegofile.f5_parameter_password_get
    if _newclass:password = _swig_property(_libstegofile.f5_parameter_password_get, _libstegofile.f5_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.f5_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.f5_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.f5_parameter_pwlen_get, _libstegofile.f5_parameter_pwlen_set)
    def __init__(self, *args): 
        this = _libstegofile.new_f5_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_f5_parameter
    __del__ = lambda self : None;
f5_parameter_swigregister = _libstegofile.f5_parameter_swigregister
f5_parameter_swigregister(f5_parameter)

class frirui_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, frirui_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, frirui_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["method"] = _libstegofile.frirui_parameter_method_set
    __swig_getmethods__["method"] = _libstegofile.frirui_parameter_method_get
    if _newclass:method = _swig_property(_libstegofile.frirui_parameter_method_get, _libstegofile.frirui_parameter_method_set)
    __swig_setmethods__["size"] = _libstegofile.frirui_parameter_size_set
    __swig_getmethods__["size"] = _libstegofile.frirui_parameter_size_get
    if _newclass:size = _swig_property(_libstegofile.frirui_parameter_size_get, _libstegofile.frirui_parameter_size_set)
    __swig_setmethods__["threshold"] = _libstegofile.frirui_parameter_threshold_set
    __swig_getmethods__["threshold"] = _libstegofile.frirui_parameter_threshold_get
    if _newclass:threshold = _swig_property(_libstegofile.frirui_parameter_threshold_get, _libstegofile.frirui_parameter_threshold_set)
    __swig_setmethods__["password"] = _libstegofile.frirui_parameter_password_set
    __swig_getmethods__["password"] = _libstegofile.frirui_parameter_password_get
    if _newclass:password = _swig_property(_libstegofile.frirui_parameter_password_get, _libstegofile.frirui_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.frirui_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.frirui_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.frirui_parameter_pwlen_get, _libstegofile.frirui_parameter_pwlen_set)
    def __init__(self, *args): 
        this = _libstegofile.new_frirui_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_frirui_parameter
    __del__ = lambda self : None;
frirui_parameter_swigregister = _libstegofile.frirui_parameter_swigregister
frirui_parameter_swigregister(frirui_parameter)

class gifshuffle_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gifshuffle_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gifshuffle_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["method"] = _libstegofile.gifshuffle_parameter_method_set
    __swig_getmethods__["method"] = _libstegofile.gifshuffle_parameter_method_get
    if _newclass:method = _swig_property(_libstegofile.gifshuffle_parameter_method_get, _libstegofile.gifshuffle_parameter_method_set)
    __swig_setmethods__["password"] = _libstegofile.gifshuffle_parameter_password_set
    __swig_getmethods__["password"] = _libstegofile.gifshuffle_parameter_password_get
    if _newclass:password = _swig_property(_libstegofile.gifshuffle_parameter_password_get, _libstegofile.gifshuffle_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.gifshuffle_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.gifshuffle_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.gifshuffle_parameter_pwlen_get, _libstegofile.gifshuffle_parameter_pwlen_set)
    __swig_setmethods__["adv_pal"] = _libstegofile.gifshuffle_parameter_adv_pal_set
    __swig_getmethods__["adv_pal"] = _libstegofile.gifshuffle_parameter_adv_pal_get
    if _newclass:adv_pal = _swig_property(_libstegofile.gifshuffle_parameter_adv_pal_get, _libstegofile.gifshuffle_parameter_adv_pal_set)
    def __init__(self, *args): 
        this = _libstegofile.new_gifshuffle_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_gifshuffle_parameter
    __del__ = lambda self : None;
gifshuffle_parameter_swigregister = _libstegofile.gifshuffle_parameter_swigregister
gifshuffle_parameter_swigregister(gifshuffle_parameter)

class phasecoding_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, phasecoding_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, phasecoding_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segment_size"] = _libstegofile.phasecoding_parameter_segment_size_set
    __swig_getmethods__["segment_size"] = _libstegofile.phasecoding_parameter_segment_size_get
    if _newclass:segment_size = _swig_property(_libstegofile.phasecoding_parameter_segment_size_get, _libstegofile.phasecoding_parameter_segment_size_set)
    def __init__(self, *args): 
        this = _libstegofile.new_phasecoding_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_phasecoding_parameter
    __del__ = lambda self : None;
phasecoding_parameter_swigregister = _libstegofile.phasecoding_parameter_swigregister
phasecoding_parameter_swigregister(phasecoding_parameter)

class pq_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pq_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pq_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstegofile.pq_parameter_password_set
    __swig_getmethods__["password"] = _libstegofile.pq_parameter_password_get
    if _newclass:password = _swig_property(_libstegofile.pq_parameter_password_get, _libstegofile.pq_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.pq_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.pq_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.pq_parameter_pwlen_get, _libstegofile.pq_parameter_pwlen_set)
    __swig_setmethods__["header_size"] = _libstegofile.pq_parameter_header_size_set
    __swig_getmethods__["header_size"] = _libstegofile.pq_parameter_header_size_get
    if _newclass:header_size = _swig_property(_libstegofile.pq_parameter_header_size_get, _libstegofile.pq_parameter_header_size_set)
    __swig_setmethods__["quality"] = _libstegofile.pq_parameter_quality_set
    __swig_getmethods__["quality"] = _libstegofile.pq_parameter_quality_get
    if _newclass:quality = _swig_property(_libstegofile.pq_parameter_quality_get, _libstegofile.pq_parameter_quality_set)
    def __init__(self, *args): 
        this = _libstegofile.new_pq_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_pq_parameter
    __del__ = lambda self : None;
pq_parameter_swigregister = _libstegofile.pq_parameter_swigregister
pq_parameter_swigregister(pq_parameter)

class sortunsort_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sortunsort_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sortunsort_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstegofile.sortunsort_parameter_password_set
    __swig_getmethods__["password"] = _libstegofile.sortunsort_parameter_password_get
    if _newclass:password = _swig_property(_libstegofile.sortunsort_parameter_password_get, _libstegofile.sortunsort_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.sortunsort_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.sortunsort_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.sortunsort_parameter_pwlen_get, _libstegofile.sortunsort_parameter_pwlen_set)
    def __init__(self, *args): 
        this = _libstegofile.new_sortunsort_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_sortunsort_parameter
    __del__ = lambda self : None;
sortunsort_parameter_swigregister = _libstegofile.sortunsort_parameter_swigregister
sortunsort_parameter_swigregister(sortunsort_parameter)

LSB_SELECT_CONTINUOUS = _libstegofile.LSB_SELECT_CONTINUOUS
LSB_SELECT_RANDOM = _libstegofile.LSB_SELECT_RANDOM
class lsb_parameter_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsb_parameter_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsb_parameter_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstegofile.lsb_parameter_t_password_set
    __swig_getmethods__["password"] = _libstegofile.lsb_parameter_t_password_get
    if _newclass:password = _swig_property(_libstegofile.lsb_parameter_t_password_get, _libstegofile.lsb_parameter_t_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.lsb_parameter_t_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.lsb_parameter_t_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.lsb_parameter_t_pwlen_get, _libstegofile.lsb_parameter_t_pwlen_set)
    __swig_setmethods__["select_mode"] = _libstegofile.lsb_parameter_t_select_mode_set
    __swig_getmethods__["select_mode"] = _libstegofile.lsb_parameter_t_select_mode_get
    if _newclass:select_mode = _swig_property(_libstegofile.lsb_parameter_t_select_mode_get, _libstegofile.lsb_parameter_t_select_mode_set)
    __swig_setmethods__["use_msb"] = _libstegofile.lsb_parameter_t_use_msb_set
    __swig_getmethods__["use_msb"] = _libstegofile.lsb_parameter_t_use_msb_get
    if _newclass:use_msb = _swig_property(_libstegofile.lsb_parameter_t_use_msb_get, _libstegofile.lsb_parameter_t_use_msb_set)
    def __init__(self, *args): 
        this = _libstegofile.new_lsb_parameter_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_lsb_parameter_t
    __del__ = lambda self : None;
lsb_parameter_t_swigregister = _libstegofile.lsb_parameter_t_swigregister
lsb_parameter_t_swigregister(lsb_parameter_t)

class svg_parameter_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svg_parameter_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svg_parameter_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first_embed_digit"] = _libstegofile.svg_parameter_t_first_embed_digit_set
    __swig_getmethods__["first_embed_digit"] = _libstegofile.svg_parameter_t_first_embed_digit_get
    if _newclass:first_embed_digit = _swig_property(_libstegofile.svg_parameter_t_first_embed_digit_get, _libstegofile.svg_parameter_t_first_embed_digit_set)
    __swig_setmethods__["password"] = _libstegofile.svg_parameter_t_password_set
    __swig_getmethods__["password"] = _libstegofile.svg_parameter_t_password_get
    if _newclass:password = _swig_property(_libstegofile.svg_parameter_t_password_get, _libstegofile.svg_parameter_t_password_set)
    __swig_setmethods__["pwlen"] = _libstegofile.svg_parameter_t_pwlen_set
    __swig_getmethods__["pwlen"] = _libstegofile.svg_parameter_t_pwlen_get
    if _newclass:pwlen = _swig_property(_libstegofile.svg_parameter_t_pwlen_get, _libstegofile.svg_parameter_t_pwlen_set)
    def __init__(self, *args): 
        this = _libstegofile.new_svg_parameter_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_svg_parameter_t
    __del__ = lambda self : None;
svg_parameter_t_swigregister = _libstegofile.svg_parameter_t_swigregister
svg_parameter_t_swigregister(svg_parameter_t)

class gif_internal_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gif_internal_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gif_internal_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SWidth"] = _libstegofile.gif_internal_data_t_SWidth_set
    __swig_getmethods__["SWidth"] = _libstegofile.gif_internal_data_t_SWidth_get
    if _newclass:SWidth = _swig_property(_libstegofile.gif_internal_data_t_SWidth_get, _libstegofile.gif_internal_data_t_SWidth_set)
    __swig_setmethods__["SHeight"] = _libstegofile.gif_internal_data_t_SHeight_set
    __swig_getmethods__["SHeight"] = _libstegofile.gif_internal_data_t_SHeight_get
    if _newclass:SHeight = _swig_property(_libstegofile.gif_internal_data_t_SHeight_get, _libstegofile.gif_internal_data_t_SHeight_set)
    __swig_setmethods__["SColorResolution"] = _libstegofile.gif_internal_data_t_SColorResolution_set
    __swig_getmethods__["SColorResolution"] = _libstegofile.gif_internal_data_t_SColorResolution_get
    if _newclass:SColorResolution = _swig_property(_libstegofile.gif_internal_data_t_SColorResolution_get, _libstegofile.gif_internal_data_t_SColorResolution_set)
    __swig_setmethods__["SBackGroundColor"] = _libstegofile.gif_internal_data_t_SBackGroundColor_set
    __swig_getmethods__["SBackGroundColor"] = _libstegofile.gif_internal_data_t_SBackGroundColor_get
    if _newclass:SBackGroundColor = _swig_property(_libstegofile.gif_internal_data_t_SBackGroundColor_get, _libstegofile.gif_internal_data_t_SBackGroundColor_set)
    __swig_setmethods__["SColorMap"] = _libstegofile.gif_internal_data_t_SColorMap_set
    __swig_getmethods__["SColorMap"] = _libstegofile.gif_internal_data_t_SColorMap_get
    if _newclass:SColorMap = _swig_property(_libstegofile.gif_internal_data_t_SColorMap_get, _libstegofile.gif_internal_data_t_SColorMap_set)
    __swig_setmethods__["ImageCount"] = _libstegofile.gif_internal_data_t_ImageCount_set
    __swig_getmethods__["ImageCount"] = _libstegofile.gif_internal_data_t_ImageCount_get
    if _newclass:ImageCount = _swig_property(_libstegofile.gif_internal_data_t_ImageCount_get, _libstegofile.gif_internal_data_t_ImageCount_set)
    __swig_setmethods__["Image"] = _libstegofile.gif_internal_data_t_Image_set
    __swig_getmethods__["Image"] = _libstegofile.gif_internal_data_t_Image_get
    if _newclass:Image = _swig_property(_libstegofile.gif_internal_data_t_Image_get, _libstegofile.gif_internal_data_t_Image_set)
    __swig_setmethods__["SavedImages"] = _libstegofile.gif_internal_data_t_SavedImages_set
    __swig_getmethods__["SavedImages"] = _libstegofile.gif_internal_data_t_SavedImages_get
    if _newclass:SavedImages = _swig_property(_libstegofile.gif_internal_data_t_SavedImages_get, _libstegofile.gif_internal_data_t_SavedImages_set)
    __swig_setmethods__["UserData"] = _libstegofile.gif_internal_data_t_UserData_set
    __swig_getmethods__["UserData"] = _libstegofile.gif_internal_data_t_UserData_get
    if _newclass:UserData = _swig_property(_libstegofile.gif_internal_data_t_UserData_get, _libstegofile.gif_internal_data_t_UserData_set)
    __swig_setmethods__["Private"] = _libstegofile.gif_internal_data_t_Private_set
    __swig_getmethods__["Private"] = _libstegofile.gif_internal_data_t_Private_get
    if _newclass:Private = _swig_property(_libstegofile.gif_internal_data_t_Private_get, _libstegofile.gif_internal_data_t_Private_set)
    __swig_setmethods__["SrcFilename"] = _libstegofile.gif_internal_data_t_SrcFilename_set
    __swig_getmethods__["SrcFilename"] = _libstegofile.gif_internal_data_t_SrcFilename_get
    if _newclass:SrcFilename = _swig_property(_libstegofile.gif_internal_data_t_SrcFilename_get, _libstegofile.gif_internal_data_t_SrcFilename_set)
    def __init__(self, *args): 
        this = _libstegofile.new_gif_internal_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_gif_internal_data_t
    __del__ = lambda self : None;
gif_internal_data_t_swigregister = _libstegofile.gif_internal_data_t_swigregister
gif_internal_data_t_swigregister(gif_internal_data_t)

io_gif_read = _libstegofile.io_gif_read
io_gif_integrate = _libstegofile.io_gif_integrate
io_gif_write = _libstegofile.io_gif_write
io_gif_cleanup_internal = _libstegofile.io_gif_cleanup_internal
io_gif_cleanup_data = _libstegofile.io_gif_cleanup_data
class jpeg_internal_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_internal_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_internal_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cinfo"] = _libstegofile.jpeg_internal_data_t_cinfo_set
    __swig_getmethods__["cinfo"] = _libstegofile.jpeg_internal_data_t_cinfo_get
    if _newclass:cinfo = _swig_property(_libstegofile.jpeg_internal_data_t_cinfo_get, _libstegofile.jpeg_internal_data_t_cinfo_set)
    __swig_setmethods__["dinfo"] = _libstegofile.jpeg_internal_data_t_dinfo_set
    __swig_getmethods__["dinfo"] = _libstegofile.jpeg_internal_data_t_dinfo_get
    if _newclass:dinfo = _swig_property(_libstegofile.jpeg_internal_data_t_dinfo_get, _libstegofile.jpeg_internal_data_t_dinfo_set)
    def __init__(self, *args): 
        this = _libstegofile.new_jpeg_internal_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_jpeg_internal_data_t
    __del__ = lambda self : None;
jpeg_internal_data_t_swigregister = _libstegofile.jpeg_internal_data_t_swigregister
jpeg_internal_data_t_swigregister(jpeg_internal_data_t)

io_jpeg_read = _libstegofile.io_jpeg_read
io_jpeg_integrate = _libstegofile.io_jpeg_integrate
io_jpeg_write = _libstegofile.io_jpeg_write
io_jpeg_copy_internal = _libstegofile.io_jpeg_copy_internal
io_jpeg_cleanup_data = _libstegofile.io_jpeg_cleanup_data
io_jpeg_cleanup_internal_data = _libstegofile.io_jpeg_cleanup_internal_data
class png_internal_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, png_internal_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, png_internal_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["png_struct"] = _libstegofile.png_internal_data_t_png_struct_set
    __swig_getmethods__["png_struct"] = _libstegofile.png_internal_data_t_png_struct_get
    if _newclass:png_struct = _swig_property(_libstegofile.png_internal_data_t_png_struct_get, _libstegofile.png_internal_data_t_png_struct_set)
    __swig_setmethods__["info_struct"] = _libstegofile.png_internal_data_t_info_struct_set
    __swig_getmethods__["info_struct"] = _libstegofile.png_internal_data_t_info_struct_get
    if _newclass:info_struct = _swig_property(_libstegofile.png_internal_data_t_info_struct_get, _libstegofile.png_internal_data_t_info_struct_set)
    def __init__(self, *args): 
        this = _libstegofile.new_png_internal_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_png_internal_data_t
    __del__ = lambda self : None;
png_internal_data_t_swigregister = _libstegofile.png_internal_data_t_swigregister
png_internal_data_t_swigregister(png_internal_data_t)

io_png_read = _libstegofile.io_png_read
io_png_integrate = _libstegofile.io_png_integrate
io_png_write = _libstegofile.io_png_write
io_png_cleanup_data = _libstegofile.io_png_cleanup_data
io_png_cleanup_internal = _libstegofile.io_png_cleanup_internal
class svg_internal_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svg_internal_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svg_internal_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doc"] = _libstegofile.svg_internal_data_t_doc_set
    __swig_getmethods__["doc"] = _libstegofile.svg_internal_data_t_doc_get
    if _newclass:doc = _swig_property(_libstegofile.svg_internal_data_t_doc_get, _libstegofile.svg_internal_data_t_doc_set)
    def __init__(self, *args): 
        this = _libstegofile.new_svg_internal_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_svg_internal_data_t
    __del__ = lambda self : None;
svg_internal_data_t_swigregister = _libstegofile.svg_internal_data_t_swigregister
svg_internal_data_t_swigregister(svg_internal_data_t)

io_svg_read = _libstegofile.io_svg_read
io_svg_integrate = _libstegofile.io_svg_integrate
io_svg_write = _libstegofile.io_svg_write
io_svg_cleanup_data = _libstegofile.io_svg_cleanup_data
io_svg_cleanup_internal = _libstegofile.io_svg_cleanup_internal
class wav_internal_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wav_internal_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wav_internal_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstegofile.wav_internal_data_t_data_set
    __swig_getmethods__["data"] = _libstegofile.wav_internal_data_t_data_get
    if _newclass:data = _swig_property(_libstegofile.wav_internal_data_t_data_get, _libstegofile.wav_internal_data_t_data_set)
    __swig_setmethods__["info"] = _libstegofile.wav_internal_data_t_info_set
    __swig_getmethods__["info"] = _libstegofile.wav_internal_data_t_info_get
    if _newclass:info = _swig_property(_libstegofile.wav_internal_data_t_info_get, _libstegofile.wav_internal_data_t_info_set)
    def __init__(self, *args): 
        this = _libstegofile.new_wav_internal_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstegofile.delete_wav_internal_data_t
    __del__ = lambda self : None;
wav_internal_data_t_swigregister = _libstegofile.wav_internal_data_t_swigregister
wav_internal_data_t_swigregister(wav_internal_data_t)

io_wav_read = _libstegofile.io_wav_read
io_wav_integrate = _libstegofile.io_wav_integrate
io_wav_write = _libstegofile.io_wav_write
io_wav_copy_internal = _libstegofile.io_wav_copy_internal
io_wav_cleanup_data = _libstegofile.io_wav_cleanup_data
io_wav_cleanup_internal = _libstegofile.io_wav_cleanup_internal


