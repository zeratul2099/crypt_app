# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _libstego
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


new_charp = _libstego.new_charp
copy_charp = _libstego.copy_charp
delete_charp = _libstego.delete_charp
charp_assign = _libstego.charp_assign
charp_value = _libstego.charp_value
new_intp = _libstego.new_intp
copy_intp = _libstego.copy_intp
delete_intp = _libstego.delete_intp
intp_assign = _libstego.intp_assign
intp_value = _libstego.intp_value
new_charpp = _libstego.new_charpp
copy_charpp = _libstego.copy_charpp
delete_charpp = _libstego.delete_charpp
charpp_assign = _libstego.charpp_assign
charpp_value = _libstego.charpp_value
class lsb_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsb_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsb_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstego.lsb_data_t_data_set
    __swig_getmethods__["data"] = _libstego.lsb_data_t_data_get
    if _newclass:data = _swig_property(_libstego.lsb_data_t_data_get, _libstego.lsb_data_t_data_set)
    __swig_setmethods__["size"] = _libstego.lsb_data_t_size_set
    __swig_getmethods__["size"] = _libstego.lsb_data_t_size_get
    if _newclass:size = _swig_property(_libstego.lsb_data_t_size_get, _libstego.lsb_data_t_size_set)
    def __init__(self, *args): 
        this = _libstego.new_lsb_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_lsb_data_t
    __del__ = lambda self : None;
lsb_data_t_swigregister = _libstego.lsb_data_t_swigregister
lsb_data_t_swigregister(lsb_data_t)
cvar = _libstego.cvar

class rgb_pixel_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rgb_pixel_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rgb_pixel_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rgb"] = _libstego.rgb_pixel_t_rgb_set
    __swig_getmethods__["rgb"] = _libstego.rgb_pixel_t_rgb_get
    if _newclass:rgb = _swig_property(_libstego.rgb_pixel_t_rgb_get, _libstego.rgb_pixel_t_rgb_set)
    __swig_getmethods__["comp"] = _libstego.rgb_pixel_t_comp_get
    if _newclass:comp = _swig_property(_libstego.rgb_pixel_t_comp_get)
    def __init__(self, *args): 
        this = _libstego.new_rgb_pixel_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_rgb_pixel_t
    __del__ = lambda self : None;
rgb_pixel_t_swigregister = _libstego.rgb_pixel_t_swigregister
rgb_pixel_t_swigregister(rgb_pixel_t)

class rgb_pixel_t_comp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rgb_pixel_t_comp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rgb_pixel_t_comp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _libstego.rgb_pixel_t_comp_r_set
    __swig_getmethods__["r"] = _libstego.rgb_pixel_t_comp_r_get
    if _newclass:r = _swig_property(_libstego.rgb_pixel_t_comp_r_get, _libstego.rgb_pixel_t_comp_r_set)
    __swig_setmethods__["g"] = _libstego.rgb_pixel_t_comp_g_set
    __swig_getmethods__["g"] = _libstego.rgb_pixel_t_comp_g_get
    if _newclass:g = _swig_property(_libstego.rgb_pixel_t_comp_g_get, _libstego.rgb_pixel_t_comp_g_set)
    __swig_setmethods__["b"] = _libstego.rgb_pixel_t_comp_b_set
    __swig_getmethods__["b"] = _libstego.rgb_pixel_t_comp_b_get
    if _newclass:b = _swig_property(_libstego.rgb_pixel_t_comp_b_get, _libstego.rgb_pixel_t_comp_b_set)
    def __init__(self, *args): 
        this = _libstego.new_rgb_pixel_t_comp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_rgb_pixel_t_comp
    __del__ = lambda self : None;
rgb_pixel_t_comp_swigregister = _libstego.rgb_pixel_t_comp_swigregister
rgb_pixel_t_comp_swigregister(rgb_pixel_t_comp)

class rgb_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rgb_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rgb_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstego.rgb_data_t_data_set
    __swig_getmethods__["data"] = _libstego.rgb_data_t_data_get
    if _newclass:data = _swig_property(_libstego.rgb_data_t_data_get, _libstego.rgb_data_t_data_set)
    __swig_setmethods__["size_x"] = _libstego.rgb_data_t_size_x_set
    __swig_getmethods__["size_x"] = _libstego.rgb_data_t_size_x_get
    if _newclass:size_x = _swig_property(_libstego.rgb_data_t_size_x_get, _libstego.rgb_data_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstego.rgb_data_t_size_y_set
    __swig_getmethods__["size_y"] = _libstego.rgb_data_t_size_y_get
    if _newclass:size_y = _swig_property(_libstego.rgb_data_t_size_y_get, _libstego.rgb_data_t_size_y_set)
    def __init__(self, *args): 
        this = _libstego.new_rgb_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_rgb_data_t
    __del__ = lambda self : None;
rgb_data_t_swigregister = _libstego.rgb_data_t_swigregister
rgb_data_t_swigregister(rgb_data_t)

class wav_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wav_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wav_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstego.wav_data_t_data_set
    __swig_getmethods__["data"] = _libstego.wav_data_t_data_get
    if _newclass:data = _swig_property(_libstego.wav_data_t_data_get, _libstego.wav_data_t_data_set)
    __swig_setmethods__["num_channels"] = _libstego.wav_data_t_num_channels_set
    __swig_getmethods__["num_channels"] = _libstego.wav_data_t_num_channels_get
    if _newclass:num_channels = _swig_property(_libstego.wav_data_t_num_channels_get, _libstego.wav_data_t_num_channels_set)
    __swig_setmethods__["size"] = _libstego.wav_data_t_size_set
    __swig_getmethods__["size"] = _libstego.wav_data_t_size_get
    if _newclass:size = _swig_property(_libstego.wav_data_t_size_get, _libstego.wav_data_t_size_set)
    def __init__(self, *args): 
        this = _libstego.new_wav_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_wav_data_t
    __del__ = lambda self : None;
wav_data_t_swigregister = _libstego.wav_data_t_swigregister
wav_data_t_swigregister(wav_data_t)

class palette_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, palette_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, palette_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table"] = _libstego.palette_data_t_table_set
    __swig_getmethods__["table"] = _libstego.palette_data_t_table_get
    if _newclass:table = _swig_property(_libstego.palette_data_t_table_get, _libstego.palette_data_t_table_set)
    __swig_setmethods__["tbl_size"] = _libstego.palette_data_t_tbl_size_set
    __swig_getmethods__["tbl_size"] = _libstego.palette_data_t_tbl_size_get
    if _newclass:tbl_size = _swig_property(_libstego.palette_data_t_tbl_size_get, _libstego.palette_data_t_tbl_size_set)
    __swig_setmethods__["unique_colors"] = _libstego.palette_data_t_unique_colors_set
    __swig_getmethods__["unique_colors"] = _libstego.palette_data_t_unique_colors_get
    if _newclass:unique_colors = _swig_property(_libstego.palette_data_t_unique_colors_get, _libstego.palette_data_t_unique_colors_set)
    __swig_setmethods__["unique_length"] = _libstego.palette_data_t_unique_length_set
    __swig_getmethods__["unique_length"] = _libstego.palette_data_t_unique_length_get
    if _newclass:unique_length = _swig_property(_libstego.palette_data_t_unique_length_get, _libstego.palette_data_t_unique_length_set)
    __swig_setmethods__["nonunique_colors"] = _libstego.palette_data_t_nonunique_colors_set
    __swig_getmethods__["nonunique_colors"] = _libstego.palette_data_t_nonunique_colors_get
    if _newclass:nonunique_colors = _swig_property(_libstego.palette_data_t_nonunique_colors_get, _libstego.palette_data_t_nonunique_colors_set)
    __swig_setmethods__["nonunique_length"] = _libstego.palette_data_t_nonunique_length_set
    __swig_getmethods__["nonunique_length"] = _libstego.palette_data_t_nonunique_length_get
    if _newclass:nonunique_length = _swig_property(_libstego.palette_data_t_nonunique_length_get, _libstego.palette_data_t_nonunique_length_set)
    __swig_setmethods__["img_data"] = _libstego.palette_data_t_img_data_set
    __swig_getmethods__["img_data"] = _libstego.palette_data_t_img_data_get
    if _newclass:img_data = _swig_property(_libstego.palette_data_t_img_data_get, _libstego.palette_data_t_img_data_set)
    __swig_setmethods__["size_x"] = _libstego.palette_data_t_size_x_set
    __swig_getmethods__["size_x"] = _libstego.palette_data_t_size_x_get
    if _newclass:size_x = _swig_property(_libstego.palette_data_t_size_x_get, _libstego.palette_data_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstego.palette_data_t_size_y_set
    __swig_getmethods__["size_y"] = _libstego.palette_data_t_size_y_get
    if _newclass:size_y = _swig_property(_libstego.palette_data_t_size_y_get, _libstego.palette_data_t_size_y_set)
    def __init__(self, *args): 
        this = _libstego.new_palette_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_palette_data_t
    __del__ = lambda self : None;
palette_data_t_swigregister = _libstego.palette_data_t_swigregister
palette_data_t_swigregister(palette_data_t)

class jpeg_quant_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_quant_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_quant_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["values"] = _libstego.jpeg_quant_t_values_set
    __swig_getmethods__["values"] = _libstego.jpeg_quant_t_values_get
    if _newclass:values = _swig_property(_libstego.jpeg_quant_t_values_get, _libstego.jpeg_quant_t_values_set)
    def __init__(self, *args): 
        this = _libstego.new_jpeg_quant_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_jpeg_quant_t
    __del__ = lambda self : None;
jpeg_quant_t_swigregister = _libstego.jpeg_quant_t_swigregister
jpeg_quant_t_swigregister(jpeg_quant_t)

class jpeg_block_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_block_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_block_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["values"] = _libstego.jpeg_block_t_values_set
    __swig_getmethods__["values"] = _libstego.jpeg_block_t_values_get
    if _newclass:values = _swig_property(_libstego.jpeg_block_t_values_get, _libstego.jpeg_block_t_values_set)
    def __init__(self, *args): 
        this = _libstego.new_jpeg_block_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_jpeg_block_t
    __del__ = lambda self : None;
jpeg_block_t_swigregister = _libstego.jpeg_block_t_swigregister
jpeg_block_t_swigregister(jpeg_block_t)

class jpeg_comp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_comp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_comp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quant"] = _libstego.jpeg_comp_t_quant_set
    __swig_getmethods__["quant"] = _libstego.jpeg_comp_t_quant_get
    if _newclass:quant = _swig_property(_libstego.jpeg_comp_t_quant_get, _libstego.jpeg_comp_t_quant_set)
    __swig_setmethods__["blocks"] = _libstego.jpeg_comp_t_blocks_set
    __swig_getmethods__["blocks"] = _libstego.jpeg_comp_t_blocks_get
    if _newclass:blocks = _swig_property(_libstego.jpeg_comp_t_blocks_get, _libstego.jpeg_comp_t_blocks_set)
    __swig_setmethods__["nblocks"] = _libstego.jpeg_comp_t_nblocks_set
    __swig_getmethods__["nblocks"] = _libstego.jpeg_comp_t_nblocks_get
    if _newclass:nblocks = _swig_property(_libstego.jpeg_comp_t_nblocks_get, _libstego.jpeg_comp_t_nblocks_set)
    def __init__(self, *args): 
        this = _libstego.new_jpeg_comp_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_jpeg_comp_t
    __del__ = lambda self : None;
jpeg_comp_t_swigregister = _libstego.jpeg_comp_t_swigregister
jpeg_comp_t_swigregister(jpeg_comp_t)

class jpeg_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpeg_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpeg_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["comp_num"] = _libstego.jpeg_data_t_comp_num_set
    __swig_getmethods__["comp_num"] = _libstego.jpeg_data_t_comp_num_get
    if _newclass:comp_num = _swig_property(_libstego.jpeg_data_t_comp_num_get, _libstego.jpeg_data_t_comp_num_set)
    __swig_setmethods__["comp"] = _libstego.jpeg_data_t_comp_set
    __swig_getmethods__["comp"] = _libstego.jpeg_data_t_comp_get
    if _newclass:comp = _swig_property(_libstego.jpeg_data_t_comp_get, _libstego.jpeg_data_t_comp_set)
    __swig_setmethods__["size_x"] = _libstego.jpeg_data_t_size_x_set
    __swig_getmethods__["size_x"] = _libstego.jpeg_data_t_size_x_get
    if _newclass:size_x = _swig_property(_libstego.jpeg_data_t_size_x_get, _libstego.jpeg_data_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstego.jpeg_data_t_size_y_set
    __swig_getmethods__["size_y"] = _libstego.jpeg_data_t_size_y_get
    if _newclass:size_y = _swig_property(_libstego.jpeg_data_t_size_y_get, _libstego.jpeg_data_t_size_y_set)
    def __init__(self, *args): 
        this = _libstego.new_jpeg_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_jpeg_data_t
    __del__ = lambda self : None;
jpeg_data_t_swigregister = _libstego.jpeg_data_t_swigregister
jpeg_data_t_swigregister(jpeg_data_t)

class cpt_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpt_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpt_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstego.cpt_data_t_data_set
    __swig_getmethods__["data"] = _libstego.cpt_data_t_data_get
    if _newclass:data = _swig_property(_libstego.cpt_data_t_data_get, _libstego.cpt_data_t_data_set)
    __swig_setmethods__["size_x"] = _libstego.cpt_data_t_size_x_set
    __swig_getmethods__["size_x"] = _libstego.cpt_data_t_size_x_get
    if _newclass:size_x = _swig_property(_libstego.cpt_data_t_size_x_get, _libstego.cpt_data_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstego.cpt_data_t_size_y_set
    __swig_getmethods__["size_y"] = _libstego.cpt_data_t_size_y_get
    if _newclass:size_y = _swig_property(_libstego.cpt_data_t_size_y_get, _libstego.cpt_data_t_size_y_set)
    def __init__(self, *args): 
        this = _libstego.new_cpt_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_cpt_data_t
    __del__ = lambda self : None;
cpt_data_t_swigregister = _libstego.cpt_data_t_swigregister
cpt_data_t_swigregister(cpt_data_t)

class svg_attrib_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svg_attrib_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svg_attrib_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libstego.svg_attrib_t_data_set
    __swig_getmethods__["data"] = _libstego.svg_attrib_t_data_get
    if _newclass:data = _swig_property(_libstego.svg_attrib_t_data_get, _libstego.svg_attrib_t_data_set)
    __swig_setmethods__["node"] = _libstego.svg_attrib_t_node_set
    __swig_getmethods__["node"] = _libstego.svg_attrib_t_node_get
    if _newclass:node = _swig_property(_libstego.svg_attrib_t_node_get, _libstego.svg_attrib_t_node_set)
    def __init__(self, *args): 
        this = _libstego.new_svg_attrib_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_svg_attrib_t
    __del__ = lambda self : None;
svg_attrib_t_swigregister = _libstego.svg_attrib_t_swigregister
svg_attrib_t_swigregister(svg_attrib_t)

class svg_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svg_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svg_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attributes"] = _libstego.svg_data_t_attributes_set
    __swig_getmethods__["attributes"] = _libstego.svg_data_t_attributes_get
    if _newclass:attributes = _swig_property(_libstego.svg_data_t_attributes_get, _libstego.svg_data_t_attributes_set)
    __swig_setmethods__["num_attribs"] = _libstego.svg_data_t_num_attribs_set
    __swig_getmethods__["num_attribs"] = _libstego.svg_data_t_num_attribs_get
    if _newclass:num_attribs = _swig_property(_libstego.svg_data_t_num_attribs_get, _libstego.svg_data_t_num_attribs_set)
    def __init__(self, *args): 
        this = _libstego.new_svg_data_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_svg_data_t
    __del__ = lambda self : None;
svg_data_t_swigregister = _libstego.svg_data_t_swigregister
svg_data_t_swigregister(svg_data_t)

class battlesteg_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, battlesteg_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, battlesteg_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["startbit"] = _libstego.battlesteg_parameter_startbit_set
    __swig_getmethods__["startbit"] = _libstego.battlesteg_parameter_startbit_get
    if _newclass:startbit = _swig_property(_libstego.battlesteg_parameter_startbit_get, _libstego.battlesteg_parameter_startbit_set)
    __swig_setmethods__["filter"] = _libstego.battlesteg_parameter_filter_set
    __swig_getmethods__["filter"] = _libstego.battlesteg_parameter_filter_get
    if _newclass:filter = _swig_property(_libstego.battlesteg_parameter_filter_get, _libstego.battlesteg_parameter_filter_set)
    __swig_setmethods__["move_away"] = _libstego.battlesteg_parameter_move_away_set
    __swig_getmethods__["move_away"] = _libstego.battlesteg_parameter_move_away_get
    if _newclass:move_away = _swig_property(_libstego.battlesteg_parameter_move_away_get, _libstego.battlesteg_parameter_move_away_set)
    __swig_setmethods__["range"] = _libstego.battlesteg_parameter_range_set
    __swig_getmethods__["range"] = _libstego.battlesteg_parameter_range_get
    if _newclass:range = _swig_property(_libstego.battlesteg_parameter_range_get, _libstego.battlesteg_parameter_range_set)
    __swig_setmethods__["last_hit_x"] = _libstego.battlesteg_parameter_last_hit_x_set
    __swig_getmethods__["last_hit_x"] = _libstego.battlesteg_parameter_last_hit_x_get
    if _newclass:last_hit_x = _swig_property(_libstego.battlesteg_parameter_last_hit_x_get, _libstego.battlesteg_parameter_last_hit_x_set)
    __swig_setmethods__["last_hit_y"] = _libstego.battlesteg_parameter_last_hit_y_set
    __swig_getmethods__["last_hit_y"] = _libstego.battlesteg_parameter_last_hit_y_get
    if _newclass:last_hit_y = _swig_property(_libstego.battlesteg_parameter_last_hit_y_get, _libstego.battlesteg_parameter_last_hit_y_set)
    __swig_setmethods__["password"] = _libstego.battlesteg_parameter_password_set
    __swig_getmethods__["password"] = _libstego.battlesteg_parameter_password_get
    if _newclass:password = _swig_property(_libstego.battlesteg_parameter_password_get, _libstego.battlesteg_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstego.battlesteg_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.battlesteg_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.battlesteg_parameter_pwlen_get, _libstego.battlesteg_parameter_pwlen_set)
    def __init__(self, *args): 
        this = _libstego.new_battlesteg_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_battlesteg_parameter
    __del__ = lambda self : None;
battlesteg_parameter_swigregister = _libstego.battlesteg_parameter_swigregister
battlesteg_parameter_swigregister(battlesteg_parameter)

class cpt_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpt_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpt_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstego.cpt_parameter_password_set
    __swig_getmethods__["password"] = _libstego.cpt_parameter_password_get
    if _newclass:password = _swig_property(_libstego.cpt_parameter_password_get, _libstego.cpt_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstego.cpt_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.cpt_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.cpt_parameter_pwlen_get, _libstego.cpt_parameter_pwlen_set)
    __swig_setmethods__["block_width"] = _libstego.cpt_parameter_block_width_set
    __swig_getmethods__["block_width"] = _libstego.cpt_parameter_block_width_get
    if _newclass:block_width = _swig_property(_libstego.cpt_parameter_block_width_get, _libstego.cpt_parameter_block_width_set)
    __swig_setmethods__["block_height"] = _libstego.cpt_parameter_block_height_set
    __swig_getmethods__["block_height"] = _libstego.cpt_parameter_block_height_get
    if _newclass:block_height = _swig_property(_libstego.cpt_parameter_block_height_get, _libstego.cpt_parameter_block_height_set)
    def __init__(self, *args): 
        this = _libstego.new_cpt_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_cpt_parameter
    __del__ = lambda self : None;
cpt_parameter_swigregister = _libstego.cpt_parameter_swigregister
cpt_parameter_swigregister(cpt_parameter)

class eh_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eh_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eh_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["amplitude"] = _libstego.eh_parameter_amplitude_set
    __swig_getmethods__["amplitude"] = _libstego.eh_parameter_amplitude_get
    if _newclass:amplitude = _swig_property(_libstego.eh_parameter_amplitude_get, _libstego.eh_parameter_amplitude_set)
    __swig_setmethods__["zero_offset"] = _libstego.eh_parameter_zero_offset_set
    __swig_getmethods__["zero_offset"] = _libstego.eh_parameter_zero_offset_get
    if _newclass:zero_offset = _swig_property(_libstego.eh_parameter_zero_offset_get, _libstego.eh_parameter_zero_offset_set)
    __swig_setmethods__["one_offset"] = _libstego.eh_parameter_one_offset_set
    __swig_getmethods__["one_offset"] = _libstego.eh_parameter_one_offset_get
    if _newclass:one_offset = _swig_property(_libstego.eh_parameter_one_offset_get, _libstego.eh_parameter_one_offset_set)
    __swig_setmethods__["block_size"] = _libstego.eh_parameter_block_size_set
    __swig_getmethods__["block_size"] = _libstego.eh_parameter_block_size_get
    if _newclass:block_size = _swig_property(_libstego.eh_parameter_block_size_get, _libstego.eh_parameter_block_size_set)
    def __init__(self, *args): 
        this = _libstego.new_eh_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_eh_parameter
    __del__ = lambda self : None;
eh_parameter_swigregister = _libstego.eh_parameter_swigregister
eh_parameter_swigregister(eh_parameter)

class f5_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, f5_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, f5_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstego.f5_parameter_password_set
    __swig_getmethods__["password"] = _libstego.f5_parameter_password_get
    if _newclass:password = _swig_property(_libstego.f5_parameter_password_get, _libstego.f5_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstego.f5_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.f5_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.f5_parameter_pwlen_get, _libstego.f5_parameter_pwlen_set)
    def __init__(self, *args): 
        this = _libstego.new_f5_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_f5_parameter
    __del__ = lambda self : None;
f5_parameter_swigregister = _libstego.f5_parameter_swigregister
f5_parameter_swigregister(f5_parameter)

class frirui_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, frirui_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, frirui_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["method"] = _libstego.frirui_parameter_method_set
    __swig_getmethods__["method"] = _libstego.frirui_parameter_method_get
    if _newclass:method = _swig_property(_libstego.frirui_parameter_method_get, _libstego.frirui_parameter_method_set)
    __swig_setmethods__["size"] = _libstego.frirui_parameter_size_set
    __swig_getmethods__["size"] = _libstego.frirui_parameter_size_get
    if _newclass:size = _swig_property(_libstego.frirui_parameter_size_get, _libstego.frirui_parameter_size_set)
    __swig_setmethods__["threshold"] = _libstego.frirui_parameter_threshold_set
    __swig_getmethods__["threshold"] = _libstego.frirui_parameter_threshold_get
    if _newclass:threshold = _swig_property(_libstego.frirui_parameter_threshold_get, _libstego.frirui_parameter_threshold_set)
    __swig_setmethods__["password"] = _libstego.frirui_parameter_password_set
    __swig_getmethods__["password"] = _libstego.frirui_parameter_password_get
    if _newclass:password = _swig_property(_libstego.frirui_parameter_password_get, _libstego.frirui_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstego.frirui_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.frirui_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.frirui_parameter_pwlen_get, _libstego.frirui_parameter_pwlen_set)
    def __init__(self, *args): 
        this = _libstego.new_frirui_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_frirui_parameter
    __del__ = lambda self : None;
frirui_parameter_swigregister = _libstego.frirui_parameter_swigregister
frirui_parameter_swigregister(frirui_parameter)

class gifshuffle_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gifshuffle_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gifshuffle_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["method"] = _libstego.gifshuffle_parameter_method_set
    __swig_getmethods__["method"] = _libstego.gifshuffle_parameter_method_get
    if _newclass:method = _swig_property(_libstego.gifshuffle_parameter_method_get, _libstego.gifshuffle_parameter_method_set)
    __swig_setmethods__["password"] = _libstego.gifshuffle_parameter_password_set
    __swig_getmethods__["password"] = _libstego.gifshuffle_parameter_password_get
    if _newclass:password = _swig_property(_libstego.gifshuffle_parameter_password_get, _libstego.gifshuffle_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstego.gifshuffle_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.gifshuffle_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.gifshuffle_parameter_pwlen_get, _libstego.gifshuffle_parameter_pwlen_set)
    __swig_setmethods__["adv_pal"] = _libstego.gifshuffle_parameter_adv_pal_set
    __swig_getmethods__["adv_pal"] = _libstego.gifshuffle_parameter_adv_pal_get
    if _newclass:adv_pal = _swig_property(_libstego.gifshuffle_parameter_adv_pal_get, _libstego.gifshuffle_parameter_adv_pal_set)
    def __init__(self, *args): 
        this = _libstego.new_gifshuffle_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_gifshuffle_parameter
    __del__ = lambda self : None;
gifshuffle_parameter_swigregister = _libstego.gifshuffle_parameter_swigregister
gifshuffle_parameter_swigregister(gifshuffle_parameter)

class phasecoding_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, phasecoding_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, phasecoding_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segment_size"] = _libstego.phasecoding_parameter_segment_size_set
    __swig_getmethods__["segment_size"] = _libstego.phasecoding_parameter_segment_size_get
    if _newclass:segment_size = _swig_property(_libstego.phasecoding_parameter_segment_size_get, _libstego.phasecoding_parameter_segment_size_set)
    def __init__(self, *args): 
        this = _libstego.new_phasecoding_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_phasecoding_parameter
    __del__ = lambda self : None;
phasecoding_parameter_swigregister = _libstego.phasecoding_parameter_swigregister
phasecoding_parameter_swigregister(phasecoding_parameter)

class pq_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pq_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pq_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstego.pq_parameter_password_set
    __swig_getmethods__["password"] = _libstego.pq_parameter_password_get
    if _newclass:password = _swig_property(_libstego.pq_parameter_password_get, _libstego.pq_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstego.pq_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.pq_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.pq_parameter_pwlen_get, _libstego.pq_parameter_pwlen_set)
    __swig_setmethods__["header_size"] = _libstego.pq_parameter_header_size_set
    __swig_getmethods__["header_size"] = _libstego.pq_parameter_header_size_get
    if _newclass:header_size = _swig_property(_libstego.pq_parameter_header_size_get, _libstego.pq_parameter_header_size_set)
    __swig_setmethods__["quality"] = _libstego.pq_parameter_quality_set
    __swig_getmethods__["quality"] = _libstego.pq_parameter_quality_get
    if _newclass:quality = _swig_property(_libstego.pq_parameter_quality_get, _libstego.pq_parameter_quality_set)
    def __init__(self, *args): 
        this = _libstego.new_pq_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_pq_parameter
    __del__ = lambda self : None;
pq_parameter_swigregister = _libstego.pq_parameter_swigregister
pq_parameter_swigregister(pq_parameter)

class sortunsort_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sortunsort_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sortunsort_parameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstego.sortunsort_parameter_password_set
    __swig_getmethods__["password"] = _libstego.sortunsort_parameter_password_get
    if _newclass:password = _swig_property(_libstego.sortunsort_parameter_password_get, _libstego.sortunsort_parameter_password_set)
    __swig_setmethods__["pwlen"] = _libstego.sortunsort_parameter_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.sortunsort_parameter_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.sortunsort_parameter_pwlen_get, _libstego.sortunsort_parameter_pwlen_set)
    def __init__(self, *args): 
        this = _libstego.new_sortunsort_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_sortunsort_parameter
    __del__ = lambda self : None;
sortunsort_parameter_swigregister = _libstego.sortunsort_parameter_swigregister
sortunsort_parameter_swigregister(sortunsort_parameter)

LSB_SELECT_CONTINUOUS = _libstego.LSB_SELECT_CONTINUOUS
LSB_SELECT_RANDOM = _libstego.LSB_SELECT_RANDOM
class lsb_parameter_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsb_parameter_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsb_parameter_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["password"] = _libstego.lsb_parameter_t_password_set
    __swig_getmethods__["password"] = _libstego.lsb_parameter_t_password_get
    if _newclass:password = _swig_property(_libstego.lsb_parameter_t_password_get, _libstego.lsb_parameter_t_password_set)
    __swig_setmethods__["pwlen"] = _libstego.lsb_parameter_t_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.lsb_parameter_t_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.lsb_parameter_t_pwlen_get, _libstego.lsb_parameter_t_pwlen_set)
    __swig_setmethods__["select_mode"] = _libstego.lsb_parameter_t_select_mode_set
    __swig_getmethods__["select_mode"] = _libstego.lsb_parameter_t_select_mode_get
    if _newclass:select_mode = _swig_property(_libstego.lsb_parameter_t_select_mode_get, _libstego.lsb_parameter_t_select_mode_set)
    __swig_setmethods__["use_msb"] = _libstego.lsb_parameter_t_use_msb_set
    __swig_getmethods__["use_msb"] = _libstego.lsb_parameter_t_use_msb_get
    if _newclass:use_msb = _swig_property(_libstego.lsb_parameter_t_use_msb_get, _libstego.lsb_parameter_t_use_msb_set)
    def __init__(self, *args): 
        this = _libstego.new_lsb_parameter_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_lsb_parameter_t
    __del__ = lambda self : None;
lsb_parameter_t_swigregister = _libstego.lsb_parameter_t_swigregister
lsb_parameter_t_swigregister(lsb_parameter_t)

class svg_parameter_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svg_parameter_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svg_parameter_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first_embed_digit"] = _libstego.svg_parameter_t_first_embed_digit_set
    __swig_getmethods__["first_embed_digit"] = _libstego.svg_parameter_t_first_embed_digit_get
    if _newclass:first_embed_digit = _swig_property(_libstego.svg_parameter_t_first_embed_digit_get, _libstego.svg_parameter_t_first_embed_digit_set)
    __swig_setmethods__["password"] = _libstego.svg_parameter_t_password_set
    __swig_getmethods__["password"] = _libstego.svg_parameter_t_password_get
    if _newclass:password = _swig_property(_libstego.svg_parameter_t_password_get, _libstego.svg_parameter_t_password_set)
    __swig_setmethods__["pwlen"] = _libstego.svg_parameter_t_pwlen_set
    __swig_getmethods__["pwlen"] = _libstego.svg_parameter_t_pwlen_get
    if _newclass:pwlen = _swig_property(_libstego.svg_parameter_t_pwlen_get, _libstego.svg_parameter_t_pwlen_set)
    def __init__(self, *args): 
        this = _libstego.new_svg_parameter_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_svg_parameter_t
    __del__ = lambda self : None;
svg_parameter_t_swigregister = _libstego.svg_parameter_t_swigregister
svg_parameter_t_swigregister(svg_parameter_t)

class filter_value_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, filter_value_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, filter_value_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _libstego.filter_value_t_value_set
    __swig_getmethods__["value"] = _libstego.filter_value_t_value_get
    if _newclass:value = _swig_property(_libstego.filter_value_t_value_get, _libstego.filter_value_t_value_set)
    __swig_setmethods__["coord_x"] = _libstego.filter_value_t_coord_x_set
    __swig_getmethods__["coord_x"] = _libstego.filter_value_t_coord_x_get
    if _newclass:coord_x = _swig_property(_libstego.filter_value_t_coord_x_get, _libstego.filter_value_t_coord_x_set)
    __swig_setmethods__["coord_y"] = _libstego.filter_value_t_coord_y_set
    __swig_getmethods__["coord_y"] = _libstego.filter_value_t_coord_y_get
    if _newclass:coord_y = _swig_property(_libstego.filter_value_t_coord_y_get, _libstego.filter_value_t_coord_y_set)
    def __init__(self, *args): 
        this = _libstego.new_filter_value_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_filter_value_t
    __del__ = lambda self : None;
filter_value_t_swigregister = _libstego.filter_value_t_swigregister
filter_value_t_swigregister(filter_value_t)

class filter_map_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, filter_map_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, filter_map_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filter_values"] = _libstego.filter_map_t_filter_values_set
    __swig_getmethods__["filter_values"] = _libstego.filter_map_t_filter_values_get
    if _newclass:filter_values = _swig_property(_libstego.filter_map_t_filter_values_get, _libstego.filter_map_t_filter_values_set)
    __swig_setmethods__["size_x"] = _libstego.filter_map_t_size_x_set
    __swig_getmethods__["size_x"] = _libstego.filter_map_t_size_x_get
    if _newclass:size_x = _swig_property(_libstego.filter_map_t_size_x_get, _libstego.filter_map_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstego.filter_map_t_size_y_set
    __swig_getmethods__["size_y"] = _libstego.filter_map_t_size_y_get
    if _newclass:size_y = _swig_property(_libstego.filter_map_t_size_y_get, _libstego.filter_map_t_size_y_set)
    def __init__(self, *args): 
        this = _libstego.new_filter_map_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_filter_map_t
    __del__ = lambda self : None;
filter_map_t_swigregister = _libstego.filter_map_t_swigregister
filter_map_t_swigregister(filter_map_t)

class ship_array_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ship_array_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ship_array_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ships"] = _libstego.ship_array_t_ships_set
    __swig_getmethods__["ships"] = _libstego.ship_array_t_ships_get
    if _newclass:ships = _swig_property(_libstego.ship_array_t_ships_get, _libstego.ship_array_t_ships_set)
    __swig_setmethods__["size_x"] = _libstego.ship_array_t_size_x_set
    __swig_getmethods__["size_x"] = _libstego.ship_array_t_size_x_get
    if _newclass:size_x = _swig_property(_libstego.ship_array_t_size_x_get, _libstego.ship_array_t_size_x_set)
    __swig_setmethods__["size_y"] = _libstego.ship_array_t_size_y_set
    __swig_getmethods__["size_y"] = _libstego.ship_array_t_size_y_get
    if _newclass:size_y = _swig_property(_libstego.ship_array_t_size_y_get, _libstego.ship_array_t_size_y_set)
    def __init__(self, *args): 
        this = _libstego.new_ship_array_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_ship_array_t
    __del__ = lambda self : None;
ship_array_t_swigregister = _libstego.ship_array_t_swigregister
ship_array_t_swigregister(ship_array_t)

battlesteg_embed = _libstego.battlesteg_embed
battlesteg_extract = _libstego.battlesteg_extract
battlesteg_get_message_length = _libstego.battlesteg_get_message_length
battlesteg_check_capacity = _libstego.battlesteg_check_capacity
battlesteg_use_laplace = _libstego.battlesteg_use_laplace
battlesteg_quicksort = _libstego.battlesteg_quicksort
battlesteg_shuffle_equal = _libstego.battlesteg_shuffle_equal
battlesteg_find_ships = _libstego.battlesteg_find_ships
battlesteg_make_shot = _libstego.battlesteg_make_shot
class cpt_matrix_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpt_matrix_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cpt_matrix_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _libstego.cpt_matrix_t_width_set
    __swig_getmethods__["width"] = _libstego.cpt_matrix_t_width_get
    if _newclass:width = _swig_property(_libstego.cpt_matrix_t_width_get, _libstego.cpt_matrix_t_width_set)
    __swig_setmethods__["height"] = _libstego.cpt_matrix_t_height_set
    __swig_getmethods__["height"] = _libstego.cpt_matrix_t_height_get
    if _newclass:height = _swig_property(_libstego.cpt_matrix_t_height_get, _libstego.cpt_matrix_t_height_set)
    __swig_setmethods__["data"] = _libstego.cpt_matrix_t_data_set
    __swig_getmethods__["data"] = _libstego.cpt_matrix_t_data_get
    if _newclass:data = _swig_property(_libstego.cpt_matrix_t_data_get, _libstego.cpt_matrix_t_data_set)
    def __init__(self, *args): 
        this = _libstego.new_cpt_matrix_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_cpt_matrix_t
    __del__ = lambda self : None;
cpt_matrix_t_swigregister = _libstego.cpt_matrix_t_swigregister
cpt_matrix_t_swigregister(cpt_matrix_t)

cpt_embed = _libstego.cpt_embed
cpt_extract = _libstego.cpt_extract
cpt_get_message_length = _libstego.cpt_get_message_length
cpt_check_capacity = _libstego.cpt_check_capacity
eh_embed = _libstego.eh_embed
eh_extract = _libstego.eh_extract
eh_get_message_length = _libstego.eh_get_message_length
eh_check_capacity = _libstego.eh_check_capacity
eh_generate_echo = _libstego.eh_generate_echo
eh_generate_mix = _libstego.eh_generate_mix
eh_mix_echoes = _libstego.eh_mix_echoes
eh_auto_correlate = _libstego.eh_auto_correlate
class f5_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, f5_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, f5_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["coeff_list"] = _libstego.f5_context_coeff_list_set
    __swig_getmethods__["coeff_list"] = _libstego.f5_context_coeff_list_get
    if _newclass:coeff_list = _swig_property(_libstego.f5_context_coeff_list_get, _libstego.f5_context_coeff_list_set)
    __swig_setmethods__["list_len"] = _libstego.f5_context_list_len_set
    __swig_getmethods__["list_len"] = _libstego.f5_context_list_len_get
    if _newclass:list_len = _swig_property(_libstego.f5_context_list_len_get, _libstego.f5_context_list_len_set)
    __swig_setmethods__["k"] = _libstego.f5_context_k_set
    __swig_getmethods__["k"] = _libstego.f5_context_k_get
    if _newclass:k = _swig_property(_libstego.f5_context_k_get, _libstego.f5_context_k_set)
    __swig_setmethods__["n"] = _libstego.f5_context_n_set
    __swig_getmethods__["n"] = _libstego.f5_context_n_get
    if _newclass:n = _swig_property(_libstego.f5_context_n_get, _libstego.f5_context_n_set)
    __swig_setmethods__["random"] = _libstego.f5_context_random_set
    __swig_getmethods__["random"] = _libstego.f5_context_random_get
    if _newclass:random = _swig_property(_libstego.f5_context_random_get, _libstego.f5_context_random_set)
    __swig_setmethods__["stego_data"] = _libstego.f5_context_stego_data_set
    __swig_getmethods__["stego_data"] = _libstego.f5_context_stego_data_get
    if _newclass:stego_data = _swig_property(_libstego.f5_context_stego_data_get, _libstego.f5_context_stego_data_set)
    __swig_setmethods__["message"] = _libstego.f5_context_message_set
    __swig_getmethods__["message"] = _libstego.f5_context_message_get
    if _newclass:message = _swig_property(_libstego.f5_context_message_get, _libstego.f5_context_message_set)
    __swig_setmethods__["msg_len"] = _libstego.f5_context_msg_len_set
    __swig_getmethods__["msg_len"] = _libstego.f5_context_msg_len_get
    if _newclass:msg_len = _swig_property(_libstego.f5_context_msg_len_get, _libstego.f5_context_msg_len_set)
    def __init__(self, *args): 
        this = _libstego.new_f5_context(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_f5_context
    __del__ = lambda self : None;
f5_context_swigregister = _libstego.f5_context_swigregister
f5_context_swigregister(f5_context)

f5_embed = _libstego.f5_embed
f5_extract = _libstego.f5_extract
f5_extract_message = _libstego.f5_extract_message
f5_get_message_length = _libstego.f5_get_message_length
f5_check_capacity = _libstego.f5_check_capacity
f5_create_coeff_list = _libstego.f5_create_coeff_list
f5_choose_code = _libstego.f5_choose_code
jpeg_data_copy = _libstego.jpeg_data_copy
jpeg_data_cleanup = _libstego.jpeg_data_cleanup
f5_embed_message_length = _libstego.f5_embed_message_length
f5_matrix_encode = _libstego.f5_matrix_encode
class DISTANCE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DISTANCE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DISTANCE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["color1"] = _libstego.DISTANCE_color1_set
    __swig_getmethods__["color1"] = _libstego.DISTANCE_color1_get
    if _newclass:color1 = _swig_property(_libstego.DISTANCE_color1_get, _libstego.DISTANCE_color1_set)
    __swig_setmethods__["color2"] = _libstego.DISTANCE_color2_set
    __swig_getmethods__["color2"] = _libstego.DISTANCE_color2_get
    if _newclass:color2 = _swig_property(_libstego.DISTANCE_color2_get, _libstego.DISTANCE_color2_set)
    __swig_setmethods__["distance"] = _libstego.DISTANCE_distance_set
    __swig_getmethods__["distance"] = _libstego.DISTANCE_distance_get
    if _newclass:distance = _swig_property(_libstego.DISTANCE_distance_get, _libstego.DISTANCE_distance_set)
    def __init__(self, *args): 
        this = _libstego.new_DISTANCE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_DISTANCE
    __del__ = lambda self : None;
DISTANCE_swigregister = _libstego.DISTANCE_swigregister
DISTANCE_swigregister(DISTANCE)

class BLOCK3X3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BLOCK3X3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BLOCK3X3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["threshold"] = _libstego.BLOCK3X3_threshold_set
    __swig_getmethods__["threshold"] = _libstego.BLOCK3X3_threshold_get
    if _newclass:threshold = _swig_property(_libstego.BLOCK3X3_threshold_get, _libstego.BLOCK3X3_threshold_set)
    __swig_setmethods__["parity"] = _libstego.BLOCK3X3_parity_set
    __swig_getmethods__["parity"] = _libstego.BLOCK3X3_parity_get
    if _newclass:parity = _swig_property(_libstego.BLOCK3X3_parity_get, _libstego.BLOCK3X3_parity_set)
    __swig_setmethods__["pixels"] = _libstego.BLOCK3X3_pixels_set
    __swig_getmethods__["pixels"] = _libstego.BLOCK3X3_pixels_get
    if _newclass:pixels = _swig_property(_libstego.BLOCK3X3_pixels_get, _libstego.BLOCK3X3_pixels_set)
    __swig_setmethods__["position_x"] = _libstego.BLOCK3X3_position_x_set
    __swig_getmethods__["position_x"] = _libstego.BLOCK3X3_position_x_get
    if _newclass:position_x = _swig_property(_libstego.BLOCK3X3_position_x_get, _libstego.BLOCK3X3_position_x_set)
    __swig_setmethods__["position_y"] = _libstego.BLOCK3X3_position_y_set
    __swig_getmethods__["position_y"] = _libstego.BLOCK3X3_position_y_get
    if _newclass:position_y = _swig_property(_libstego.BLOCK3X3_position_y_get, _libstego.BLOCK3X3_position_y_set)
    def __init__(self, *args): 
        this = _libstego.new_BLOCK3X3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_BLOCK3X3
    __del__ = lambda self : None;
BLOCK3X3_swigregister = _libstego.BLOCK3X3_swigregister
BLOCK3X3_swigregister(BLOCK3X3)

class BLOCK2X2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BLOCK2X2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BLOCK2X2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pixels"] = _libstego.BLOCK2X2_pixels_set
    __swig_getmethods__["pixels"] = _libstego.BLOCK2X2_pixels_get
    if _newclass:pixels = _swig_property(_libstego.BLOCK2X2_pixels_get, _libstego.BLOCK2X2_pixels_set)
    __swig_setmethods__["position_x"] = _libstego.BLOCK2X2_position_x_set
    __swig_getmethods__["position_x"] = _libstego.BLOCK2X2_position_x_get
    if _newclass:position_x = _swig_property(_libstego.BLOCK2X2_position_x_get, _libstego.BLOCK2X2_position_x_set)
    __swig_setmethods__["position_y"] = _libstego.BLOCK2X2_position_y_set
    __swig_getmethods__["position_y"] = _libstego.BLOCK2X2_position_y_get
    if _newclass:position_y = _swig_property(_libstego.BLOCK2X2_position_y_get, _libstego.BLOCK2X2_position_y_set)
    __swig_setmethods__["parity"] = _libstego.BLOCK2X2_parity_set
    __swig_getmethods__["parity"] = _libstego.BLOCK2X2_parity_get
    if _newclass:parity = _swig_property(_libstego.BLOCK2X2_parity_get, _libstego.BLOCK2X2_parity_set)
    def __init__(self, *args): 
        this = _libstego.new_BLOCK2X2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_BLOCK2X2
    __del__ = lambda self : None;
BLOCK2X2_swigregister = _libstego.BLOCK2X2_swigregister
BLOCK2X2_swigregister(BLOCK2X2)

class CHAIN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHAIN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHAIN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parity"] = _libstego.CHAIN_parity_set
    __swig_getmethods__["parity"] = _libstego.CHAIN_parity_get
    if _newclass:parity = _swig_property(_libstego.CHAIN_parity_get, _libstego.CHAIN_parity_set)
    __swig_setmethods__["pixels"] = _libstego.CHAIN_pixels_set
    __swig_getmethods__["pixels"] = _libstego.CHAIN_pixels_get
    if _newclass:pixels = _swig_property(_libstego.CHAIN_pixels_get, _libstego.CHAIN_pixels_set)
    __swig_setmethods__["id_in_stream"] = _libstego.CHAIN_id_in_stream_set
    __swig_getmethods__["id_in_stream"] = _libstego.CHAIN_id_in_stream_get
    if _newclass:id_in_stream = _swig_property(_libstego.CHAIN_id_in_stream_get, _libstego.CHAIN_id_in_stream_set)
    def __init__(self, *args): 
        this = _libstego.new_CHAIN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libstego.delete_CHAIN
    __del__ = lambda self : None;
CHAIN_swigregister = _libstego.CHAIN_swigregister
CHAIN_swigregister(CHAIN)

frirui_embed = _libstego.frirui_embed
frirui_extract = _libstego.frirui_extract
frirui_get_message_length = _libstego.frirui_get_message_length
frirui_check_capacity = _libstego.frirui_check_capacity
frirui_calc_parity = _libstego.frirui_calc_parity
frirui_calc_distances = _libstego.frirui_calc_distances
frirui_build_colortable = _libstego.frirui_build_colortable
frirui_embed_message_to_chains = _libstego.frirui_embed_message_to_chains
embed_bit_to_chain = _libstego.embed_bit_to_chain
frirui_embed_message_to_3X3BLOCKS = _libstego.frirui_embed_message_to_3X3BLOCKS
embed_bit_to_3X3BLOCK = _libstego.embed_bit_to_3X3BLOCK
frirui_embed_message_to_2X2BLOCKS = _libstego.frirui_embed_message_to_2X2BLOCKS
embed_bit_to_2X2BLOCK = _libstego.embed_bit_to_2X2BLOCK
gifshuffle_embed = _libstego.gifshuffle_embed
gifshuffle_extract = _libstego.gifshuffle_extract
gifshuffle_check_capacity = _libstego.gifshuffle_check_capacity
lsb_get_message_length = _libstego.lsb_get_message_length
lsb_embed = _libstego.lsb_embed
lsb_extract = _libstego.lsb_extract
lsb_check_capacity = _libstego.lsb_check_capacity
lsb_convert_png = _libstego.lsb_convert_png
lsb_cleanup_converted_data = _libstego.lsb_cleanup_converted_data
lsb_get_message_length_indirect = _libstego.lsb_get_message_length_indirect
lsb_embed_indirect = _libstego.lsb_embed_indirect
lsb_extract_indirect = _libstego.lsb_extract_indirect
lsb_check_capacity_indirect = _libstego.lsb_check_capacity_indirect
_PQ_HEADER_SIZE = _libstego._PQ_HEADER_SIZE
pq_embed = _libstego.pq_embed
pq_extract = _libstego.pq_extract
pq_get_message_length = _libstego.pq_get_message_length
pq_check_capacity = _libstego.pq_check_capacity
sortunsort_embed = _libstego.sortunsort_embed
sortunsort_extract = _libstego.sortunsort_extract
sortunsort_check_capacity = _libstego.sortunsort_check_capacity
svg_get_message_length = _libstego.svg_get_message_length
svg_embed = _libstego.svg_embed
svg_extract = _libstego.svg_extract
svg_check_capacity = _libstego.svg_check_capacity

capacity_lookup = cvar.capacity_lookup
_pq_luminance_quant_tbl = cvar._pq_luminance_quant_tbl
_pq_chrominance_quant_tbl = cvar._pq_chrominance_quant_tbl

